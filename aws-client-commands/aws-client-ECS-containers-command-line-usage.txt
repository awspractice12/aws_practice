------------------------------------------------------------------------------------
#install it
#it is 35MB in size
sudo curl -o /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest

verify MD5
echo "$(curl -s https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest.md5) /usr/local/bin/ecs-cli" | md5sum -c -

sudo chmod +x /usr/local/bin/ecs-cli
ecs-cli --version
Output: ecs-cli version 1.18.1 (7e9df84)

------------------------------------------------------------------------------------
AWS_ACCESS_KEY_ID=AKIA2VFB7N6UXMLCBFZK
AWS_SECRET_ACCESS_KEY=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
ecs-cli configure profile --profile-name default       --access-key $AWS_ACCESS_KEY_ID --secret-key $AWS_SECRET_ACCESS_KEY
ecs-cli configure profile --profile-name shibu_profile --access-key $AWS_ACCESS_KEY_ID --secret-key $AWS_SECRET_ACCESS_KEY

------------------------------------------------------------------------------------
REGION=us-east-2
ecs-cli configure --cluster cluster_name --default-launch-type EC2 --region $REGION --config-name configuration_name

------------------------------------------------------------------------------------
Create a file named task-execution-assume-role.json with the following contents: 
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
------------------------------------------------------------------------------------
aws iam --region $REGION create-role --role-name ecsTaskExecutionRole --assume-role-policy-document file://task-execution-assume-role.json
aws iam --region $REGION attach-role-policy --role-name ecsTaskExecutionRole --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
ecs-cli configure --cluster tutorial --default-launch-type FARGATE --config-name tutorial --region $REGION
ecs-cli configure profile --access-key $AWS_ACCESS_KEY_ID --secret-key $AWS_SECRET_ACCESS_KEY --profile-name tutorial-profile
ecs-cli up --cluster-config tutorial --ecs-profile tutorial-profile

Sample output. Note down these values...
VPC created: vpc-04f0552f75000ee04
Subnet created: subnet-0126d070cd962c507
Subnet created: subnet-006c775a8805f5fcd
Cluster creation succeeded.

------------------------------------------------------------------------------------
VPC_NAME=vpc-04f0552f75000ee04

aws ec2 describe-security-groups --filters Name=vpc-id,Values=$VPC_NAME --region $REGION

Note down   "GroupId": "sg-06459a30d611952fb"

------------------------------------------------------------------------------------
SEC_GROUP_ID=sg-06459a30d611952fb

aws ec2 authorize-security-group-ingress --group-id $SEC_GROUP_ID --protocol tcp --port 80 --cidr 0.0.0.0/0 --region $REGION

------------------------------------------------------------------------------------
vi docker-compose.yml
version: '3'
services:
  web:
    image: amazon/amazon-ecs-sample
    ports:
      - "80:80"
    logging:
      driver: awslogs
      options: 
        awslogs-group: tutorial
        awslogs-region: us-west-2
        awslogs-stream-prefix: web
------------------------------------------------------------------------------------
vi ecs-params.yml
version: 1
task_definition:
  task_execution_role: ecsTaskExecutionRole
  ecs_network_mode: awsvpc
  task_size:
    mem_limit: 0.5GB
    cpu_limit: 256
run_params:
  network_configuration:
    awsvpc_configuration:
      subnets:
        - "subnet ID 1"
        - "subnet ID 2"
      security_groups:
        - "security group ID"
      assign_public_ip: ENABLED
------------------------------------------------------------------------------------
Deploy the Compose File to a Cluster 
ecs-cli compose --project-name tutorial service up --create-log-groups --cluster-config tutorial --ecs-profile tutorial-profile


View containers
ecs-cli compose --project-name tutorial service ps --cluster-config tutorial --ecs-profile tutorial-profile

View the Container Logs 
ecs-cli logs --task-id ad3b0210-97e5-49f0-aa4c-c732dd2eeef9 --follow --cluster-config tutorial --ecs-profile tutorial-profile


Scale containers
ecs-cli compose --project-name tutorial service scale 2 --cluster-config tutorial --ecs-profile tutorial-profile

now you can see two containers
ecs-cli compose --project-name tutorial service ps --cluster-config tutorial --ecs-profile tutorial-profile
Sample output
Name                                      State    Ports                   TaskDefinition  Health
3fd157ce-d5fd-4866-af49-cf4a026ea0d7/web  RUNNING  3.22.66.90:80->80/tcp   tutorial:1      UNKNOWN
ad3b0210-97e5-49f0-aa4c-c732dd2eeef9/web  RUNNING  3.21.154.46:80->80/tcp  tutorial:1      UNKNOWN
 
visit 3.22.66.90:80 or 3.21.154.46:80 to see your PHP application

Shutdown - Delete all services
ecs-cli compose --project-name tutorial service down --cluster-config tutorial --ecs-profile tutorial-profile

Shutdown - delete clusters
ecs-cli down --force --cluster-config tutorial --ecs-profile tutorial-profile

